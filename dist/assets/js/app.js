'use strict';

function addClass(element, className) {
  if (element.classList) element.classList.add(className);else element.className += ' ' + className;
}

function removeClass(element, className) {
  if (element.classList) element.classList.remove(className);else element[className] = element[className].replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
}
'use strict';

function congratsCount(congrat, container) {
  var span = document.createElement('span');
  var gramm = function gramm(congrat) {
    var string = 'поздравлений';
    if (congrat % 100 < 11 || congrat % 100 > 14) {
      switch (congrat % 10) {
        case 1:
          string = 'поздравление';break;
        case 2:
        case 3:
        case 4:
          string = 'поздравления';break;
      }
    }
    return string;
  };
  //todo separate span and word "gramm"
  span.className = 'congrats-count';
  span.innerHTML = congrat + ' ' + gramm(congrat);
  container.appendChild(span);
}
'use strict';

function countdown(toDate) {
    var final = new Date(toDate);

    var remained = function remained() {
        var now = new Date();
        var diff = final - now;

        var remain = {
            daysRemain: null,
            hoursRemain: null,
            minutesRemain: null
        };

        var minutes = 60000,
            hours = minutes * 60,
            days = hours * 24;

        function leadZero(number) {
            var num = number + '';
            if (num.length <= 1) {
                return '0' + num;
            } else {
                return num;
            }
        }

        remain.daysRemain = leadZero(Math.floor(diff / days));
        remain.hoursRemain = leadZero(Math.floor(diff % days / hours));
        remain.minutesRemain = leadZero(Math.floor(diff % hours / minutes));

        document.getElementById('days').innerText = remain.daysRemain;
        document.getElementById('hours').innerText = remain.hoursRemain;
        document.getElementById('minutes').innerText = remain.minutesRemain;
    };

    var counter = setInterval(remained, 1000);
}
'use strict';

;!function () {
  var submit = document.getElementById('submit');
  var form = document.getElementById('form-congratulate');
  form.addEventListener('submit', function (e) {
    e.preventDefault();
    //counting submits = number of congratulations
    var congratCount = localStorage.getItem('trexCongrats');
    if (congratCount === null) congratCount = 0;
    congratCount++;
    localStorage.setItem('trexCongrats', congratCount);
    //send form
    var request = new XMLHttpRequest();
    request.open(form.method, form.action, true);
    request.onload = function () {
      var resp = null;
      if (request.status >= 200 && request.status < 400) {
        resp = request.responseText;
        document.getElementById('modal-body').innerHTML = resp;
        var trexCongratContainer = document.getElementById('congrats-count');
        //counting congratulations and store into container
        congratsCount(localStorage.getItem('trexCongrats'), trexCongratContainer);
      } else {
        console.log('wrong request');
      }
    };
    request.onerror = function () {
      console.log('problems of some sort');
    };
    //todo validate on keyup
    if (validation(form)) {
      request.send();
    }
  });
}();
'use strict';

;!function () {
  var modal = document.getElementById('modal');
  var modalOpenBtn = document.getElementById('modal-open');
  var closeModalBtn = document.querySelectorAll('.js-close-modal');
  var docBody = document.body;
  modalOpenBtn.addEventListener('click', function () {
    modal.style.display = 'block';
    addClass(docBody, 'is-modal-open');
  });
  //todo close modal by clicking overlay
  [].forEach.call(closeModalBtn, function (elem) {
    elem.addEventListener('click', function () {
      modal.style.display = 'none';
      removeClass(docBody, 'is-modal-open');
    });
  });
}();
'use strict';

;!function () {
  var slider = document.getElementById('slider'),
      nextBtn = document.getElementById('next'),
      prevBtn = document.getElementById('prev'),
      slides = slider.getElementsByTagName('li'),
      counter = 0;

  function showImage(index) {
    [].forEach.call(slides, function (elem) {
      removeClass(elem, 'slider__item--active');
    });
    addClass(slides[index], 'slider__item--active');
  }

  function nextImg() {
    if (counter < slides.length - 1) {
      counter += 1;
    } else {
      counter = 0;
    }
    showImage(counter);
  }

  function prevImg() {
    if (counter > 0) {
      counter -= 1;
    } else {
      counter = slides.length - 1;
    }
    showImage(counter);
  }

  window.setInterval(prevImg, 6000);

  nextBtn.onclick = nextImg;
  prevBtn.onclick = prevImg;
}();
'use strict';

function validation(form) {
    var formArray = form.elements;
    var valid = true;
    var message = 'Заполните это поле!';
    var errorContainer = document.createElement('div');
    errorContainer.innerHTML = message;
    for (var i = 0; i < formArray.length; i++) {
        if (formArray[i].hasAttribute('required') && formArray[i].value == '') {
            if (formArray[i].classList) formArray[i].classList.add('form-input--invalid');else formArray[i].className += ' form-input--invalid';
            valid = false;
        }
    }
    return valid;
}
'use strict';

countdown('September 24, 2016 24:00:00');
//# sourceMappingURL=data:application/json;base64,
